Traceback (most recent call last):
  File "train.py", line 53, in <module>
    train_pyramid(opt, dataloader)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 19, in train_pyramid
    train_layer(netD, netG, netF, opt, dataloader)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 59, in train_layer
    optimizer_F = init_mlp_weights(data, netG, netF, opt)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 35, in init_mlp_weights
    fake = netG(reals)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\models\base_models.py", line 109, in forward
    return self.model(x)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\container.py", line 117, in forward
    input = module(input)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\padding.py", line 170, in forward
    return F.pad(input, self.padding, 'reflect')
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\functional.py", line 3556, in _pad
    assert len(pad) == 2, '3D tensors expect 2 values for padding'
AssertionError: 3D tensors expect 2 values for padding

torch.Size([6, 256, 256])
Traceback (most recent call last):
  File "train.py", line 53, in <module>
    train_pyramid(opt, dataloader)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 19, in train_pyramid
    train_layer(netD, netG, netF, opt, dataloader)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 59, in train_layer
    optimizer_F = init_mlp_weights(data, netG, netF, opt)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 35, in init_mlp_weights
    fake = netG(reals, opt.nce_layers)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\models\base_models.py", line 106, in forward
    if layer_id in layers:
TypeError: 'in <string>' requires string as left operand, not int

    for i, data in enumerate(dataset):
        real_A = data['A']
        real_B = data['B']
        print(real_A.shape)
        print(real_B.size)
        reals = torch.cat((data['A'], data['B']), dim=0)
        print(reals.shape)


torch.Size([1, 3, 256, 256])
torch.Size([1, 3, 256, 256])
torch.Size([2, 3, 256, 256])


    for i, data in enumerate(dataset):
        real_A = data['A']
        real_B = data['B']
        print(real_A.shape)
        print(real_B.shape)


        A = transform(A_img)
        B = transform(B_img)
        print("HERE")
        print(A.shape)
        print(B.shape)
HERE
torch.Size([3, 256, 256])
torch.Size([3, 256, 256])
        return {'A': A, 'B': B, 'A_paths': A_path, 'B_paths': B_path}

torch.Size([3, 256, 256])
torch.Size([1, 3, 256, 256])
torch.Size([1, 3, 256, 256])



1125
torch.Size([6, 256, 256])
Traceback (most recent call last):
  File "train.py", line 55, in <module>
    train_pyramid(opt, dataloader)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 19, in train_pyramid
    train_layer(netD, netG, netF, opt, dataloader)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 59, in train_layer
    optimizer_F = init_mlp_weights(data, netG, netF, opt)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\train_utils\train_pyramid.py", line 35, in init_mlp_weights
    fake = netG(reals)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "C:\Users\ntseng\Documents\ROAHM\MUFFT-GAN\models\base_models.py", line 112, in forward
    return self.model(x)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\container.py", line 117, in forward
    input = module(input)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py", line 722, in _call_impl
    result = self.forward(*input, **kwargs)
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\padding.py", line 170, in forward
    return F.pad(input, self.padding, 'reflect')
  File "D:\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\functional.py", line 3556, in _pad
    assert len(pad) == 2, '3D tensors expect 2 values for padding'
AssertionError: 3D tensors expect 2 values for padding